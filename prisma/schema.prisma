// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  password       String
  image          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  studySessions  StudySession[]
  performanceData Performance[]
  savedContent   SavedContent[]
}

model Topic {
  id          String         @id @default(uuid())
  title       String
  description String
  category    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  content     TopicContent[]
  sessions    StudySession[]
}

model TopicContent {
  id            String   @id @default(uuid())
  topicId       String
  contentType   String // quiz, flashcard, summary, clinical_case
  content       String   @db.Text
  difficultyLevel Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  topic         Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model StudySession {
  id           String      @id @default(uuid())
  userId       String
  topicId      String
  startTime    DateTime    @default(now())
  endTime      DateTime?
  duration     Int?        // in seconds
  xpEarned     Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic        Topic       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  performance  Performance[]
}

model Performance {
  id              String       @id @default(uuid())
  userId          String
  studySessionId  String
  contentId       String?      // ID do conteúdo relacionado (quiz, flashcard, etc.)
  contentType     String       // Tipo de conteúdo (quiz, flashcard, etc.)
  score           Float        // Pontuação (0-100%)
  timeSpent       Int          // Tempo gasto em segundos
  timestamp       DateTime     @default(now())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySession    StudySession @relation(fields: [studySessionId], references: [id], onDelete: Cascade)
}

model SavedContent {
  id           String   @id @default(uuid())
  userId       String
  contentType  String   // quiz, flashcard, summary, clinical_case
  content      String   @db.Text
  reviewDate   DateTime?
  lastReviewed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 